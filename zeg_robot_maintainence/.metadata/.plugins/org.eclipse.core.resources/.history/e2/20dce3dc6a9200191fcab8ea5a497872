#include <exception>
#include "zeg_robot_broadcast.hpp"
#include "udp_unicast_agent.hpp"
#include "rpc_server.h"
using namespace zeg_robot_maintainence;
zeg_robot_broadcast zeg_robot_broadcast_thread;
bool start_thread() {
	if (false == zeg_robot_broadcast_thread.init()) {
		LOG_CRIT << "zeg_robot_broadcast_thread init failed";
		return false;
	}
	zeg_robot_broadcast_thread.run();
	return true;
}
void join_thread() {
	zeg_robot_broadcast_thread.join();
}
char udp_recv_buf[BUFSIZ] = "";
udp_unicast_agent mock_server;
zeg_robot_message obj;
msgpack::sbuffer buffer;
void recv_thread() {
	msgpack::sbuffer buffer;
	while (true) {
		int len = mock_server.recv_unicast_return_ack(udp_recv_buf, "zeg_robot_ack");
		cout << "recv = " << udp_recv_buf << endl;
		msgpack::unpacked msg;
		msgpack::unpack(&msg, udp_recv_buf, len);
		msgpack::object obj = msg.get();
		zeg_robot_message obj1;
		try {
			obj.convert(&obj1);
		}
		catch(const std::exception &e) {
			cout << e.what() << endl;
		}
	}
}
void send_thread() {
	//const char *buf = "zeg robot process ok.";
	while (true) {
		this_thread::sleep_for(chrono::seconds(1));
		cout << "size = " << buffer.size() << endl;
		cout << "send back = " << mock_server.send_back(buffer.data(), buffer.size()) << endl;
	}
}
void make_uniform_pack() {
	robot_basic_info1 obj0 = {1.2, 12, 0.01, 0, 98.899};
	msgpack::pack(buffer, obj0);
	obj.type = "zeg.robot.basic.info";
	obj.robot_id = "zeg_robot_xx011212DD1";
	obj.timestamp = chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();
	for (int i = 0;i < buffer.size();i++) {
		obj.byte_array.emplace_back(*(buffer.data() + i));
	}
	buffer.clear();
	msgpack::pack(buffer, obj);
}
int main() {
	/*
	if (false == start_thread()) {
		return -1;
	}
	join_thread();
*/
	make_uniform_pack();
	mock_server.set_port(17789);
	if (false == mock_server.init()) {
		cout << "mock server init failed...!" << endl;
		return -1;
	}
	thread th0(recv_thread);
	thread th1(send_thread);
	th0.join();
	th1.join();
	/*make_uniform_pack();
	udp_broadcast_agent client;
	if (client.init_sock_fd() < 0) {
		return -1;
	}
	while (true) {
		client.send_broadcast(buffer.data(), buffer.size(), zeg_config::get_instance().robot_broadcast_address.c_str());
		sleep(2);
	}*/
	return 0;
}



